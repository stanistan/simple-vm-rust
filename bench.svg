<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="214.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="197" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="197" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::step (35 samples, 1.55%)</title><rect x="1171.8" y="117" width="18.2" height="15.0" fill="rgb(246,82,9)" rx="2" ry="2" />
<text text-anchor="" x="1174.77" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::run (2,217 samples, 97.88%)</title><rect x="16.8" y="117" width="1155.0" height="15.0" fill="rgb(248,218,8)" rx="2" ry="2" />
<text text-anchor="" x="19.77" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm::Machine::run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm_bench (2,265 samples, 100.00%)</title><rect x="10.0" y="149" width="1180.0" height="15.0" fill="rgb(243,44,9)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm_bench</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>readlink (1 samples, 0.04%)</title><rect x="15.2" y="133" width="0.5" height="15.0" fill="rgb(235,69,22)" rx="2" ry="2" />
<text text-anchor="" x="18.21" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Or::execute (14 samples, 0.62%)</title><rect x="1143.1" y="85" width="7.3" height="15.0" fill="rgb(224,80,32)" rx="2" ry="2" />
<text text-anchor="" x="1146.11" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Duplicate::execute (214 samples, 9.45%)</title><rect x="643.5" y="69" width="111.5" height="15.0" fill="rgb(231,92,22)" rx="2" ry="2" />
<text text-anchor="" x="646.50" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm::im..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>core::ptr::drop_in_place (15 samples, 0.66%)</title><rect x="635.7" y="37" width="7.8" height="15.0" fill="rgb(210,209,36)" rx="2" ry="2" />
<text text-anchor="" x="638.69" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Swap::execute (16 samples, 0.71%)</title><rect x="1151.4" y="85" width="8.4" height="15.0" fill="rgb(223,51,49)" rx="2" ry="2" />
<text text-anchor="" x="1154.45" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::step (2,110 samples, 93.16%)</title><rect x="60.5" y="101" width="1099.3" height="15.0" fill="rgb(228,169,6)" rx="2" ry="2" />
<text text-anchor="" x="63.53" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm::Machine::step</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Or::execute (96 samples, 4.24%)</title><rect x="979.0" y="69" width="50.0" height="15.0" fill="rgb(208,16,38)" rx="2" ry="2" />
<text text-anchor="" x="982.01" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simpl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__rde_alloc (2 samples, 0.09%)</title><rect x="14.2" y="133" width="1.0" height="15.0" fill="rgb(238,76,5)" rx="2" ry="2" />
<text text-anchor="" x="17.17" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Duplicate::execute (5 samples, 0.22%)</title><rect x="1128.0" y="85" width="2.6" height="15.0" fill="rgb(227,202,31)" rx="2" ry="2" />
<text text-anchor="" x="1131.00" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vdso_clock_gettime (2 samples, 0.09%)</title><rect x="522.6" y="69" width="1.1" height="15.0" fill="rgb(254,174,29)" rx="2" ry="2" />
<text text-anchor="" x="525.64" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__rde_alloc (1 samples, 0.04%)</title><rect x="13.1" y="117" width="0.5" height="15.0" fill="rgb(236,47,44)" rx="2" ry="2" />
<text text-anchor="" x="16.13" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="13.1" y="133" width="0.5" height="15.0" fill="rgb(206,177,20)" rx="2" ry="2" />
<text text-anchor="" x="16.13" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Equals::execute (6 samples, 0.26%)</title><rect x="1130.6" y="85" width="3.1" height="15.0" fill="rgb(228,57,9)" rx="2" ry="2" />
<text text-anchor="" x="1133.61" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vdso_clock_gettime (1 samples, 0.04%)</title><rect x="16.3" y="117" width="0.5" height="15.0" fill="rgb(236,117,34)" rx="2" ry="2" />
<text text-anchor="" x="19.25" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (52 samples, 2.30%)</title><rect x="951.9" y="53" width="27.1" height="15.0" fill="rgb(240,141,52)" rx="2" ry="2" />
<text text-anchor="" x="954.92" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>test::ns_iter_inner (2,253 samples, 99.47%)</title><rect x="16.3" y="133" width="1173.7" height="15.0" fill="rgb(238,82,54)" rx="2" ry="2" />
<text text-anchor="" x="19.25" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >test::ns_iter_inner</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Not::execute (71 samples, 3.13%)</title><rect x="942.0" y="69" width="37.0" height="15.0" fill="rgb(216,157,6)" rx="2" ry="2" />
<text text-anchor="" x="945.02" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >sim..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::If::execute (95 samples, 4.19%)</title><rect x="846.7" y="69" width="49.5" height="15.0" fill="rgb(245,110,12)" rx="2" ry="2" />
<text text-anchor="" x="849.68" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simp..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (54 samples, 2.38%)</title><rect x="615.4" y="53" width="28.1" height="15.0" fill="rgb(206,181,45)" rx="2" ry="2" />
<text text-anchor="" x="618.37" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Equals::execute (176 samples, 7.77%)</title><rect x="755.0" y="69" width="91.7" height="15.0" fill="rgb(221,143,8)" rx="2" ry="2" />
<text text-anchor="" x="757.99" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm:..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>core::ptr::drop_in_place (9 samples, 0.40%)</title><rect x="610.7" y="53" width="4.7" height="15.0" fill="rgb(251,24,33)" rx="2" ry="2" />
<text text-anchor="" x="613.68" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>&lt;[f64] as test::stats::Stats&gt;::sum (1 samples, 0.04%)</title><rect x="15.7" y="101" width="0.6" height="15.0" fill="rgb(219,161,9)" rx="2" ry="2" />
<text text-anchor="" x="18.73" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vdso_clock_gettime (1 samples, 0.04%)</title><rect x="407.5" y="85" width="0.5" height="15.0" fill="rgb(211,32,2)" rx="2" ry="2" />
<text text-anchor="" x="410.50" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Minus::execute (14 samples, 0.62%)</title><rect x="1134.8" y="85" width="7.3" height="15.0" fill="rgb(237,216,40)" rx="2" ry="2" />
<text text-anchor="" x="1137.78" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (101 samples, 4.46%)</title><rect x="794.1" y="53" width="52.6" height="15.0" fill="rgb(254,40,32)" rx="2" ry="2" />
<text text-anchor="" x="797.06" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simpl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__GI___libc_open (1 samples, 0.04%)</title><rect x="14.2" y="117" width="0.5" height="15.0" fill="rgb(235,23,9)" rx="2" ry="2" />
<text text-anchor="" x="17.17" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Not::execute (2 samples, 0.09%)</title><rect x="1142.1" y="85" width="1.0" height="15.0" fill="rgb(242,5,43)" rx="2" ry="2" />
<text text-anchor="" x="1145.07" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::If::execute (2 samples, 0.09%)</title><rect x="1133.7" y="85" width="1.1" height="15.0" fill="rgb(212,72,36)" rx="2" ry="2" />
<text text-anchor="" x="1136.74" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Minus::execute (88 samples, 3.89%)</title><rect x="896.2" y="69" width="45.8" height="15.0" fill="rgb(244,77,53)" rx="2" ry="2" />
<text text-anchor="" x="899.17" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simp..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (57 samples, 2.52%)</title><rect x="999.3" y="53" width="29.7" height="15.0" fill="rgb(235,187,34)" rx="2" ry="2" />
<text text-anchor="" x="1002.32" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >si..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Call::execute (108 samples, 4.77%)</title><rect x="587.2" y="69" width="56.3" height="15.0" fill="rgb(227,66,11)" rx="2" ry="2" />
<text text-anchor="" x="590.24" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simpl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (66 samples, 2.91%)</title><rect x="1086.3" y="53" width="34.4" height="15.0" fill="rgb(252,114,10)" rx="2" ry="2" />
<text text-anchor="" x="1089.33" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >si..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Call::execute (14 samples, 0.62%)</title><rect x="1120.7" y="85" width="7.3" height="15.0" fill="rgb(226,205,32)" rx="2" ry="2" />
<text text-anchor="" x="1123.71" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (2,265 samples, 100%)</title><rect x="10.0" y="165" width="1180.0" height="15.0" fill="rgb(244,33,44)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>test::Bencher::iter (1 samples, 0.04%)</title><rect x="15.7" y="133" width="0.6" height="15.0" fill="rgb(216,40,41)" rx="2" ry="2" />
<text text-anchor="" x="18.73" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (42 samples, 1.85%)</title><rect x="874.3" y="53" width="21.9" height="15.0" fill="rgb(225,186,12)" rx="2" ry="2" />
<text text-anchor="" x="877.29" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::StackOperation::dispatch (23 samples, 1.02%)</title><rect x="1159.8" y="101" width="12.0" height="15.0" fill="rgb(242,63,52)" rx="2" ry="2" />
<text text-anchor="" x="1162.78" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (124 samples, 5.47%)</title><rect x="690.4" y="53" width="64.6" height="15.0" fill="rgb(237,120,42)" rx="2" ry="2" />
<text text-anchor="" x="693.39" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (1 samples, 0.04%)</title><rect x="408.0" y="85" width="0.5" height="15.0" fill="rgb(208,114,27)" rx="2" ry="2" />
<text text-anchor="" x="411.02" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (28 samples, 1.24%)</title><rect x="1042.0" y="53" width="14.6" height="15.0" fill="rgb(248,216,19)" rx="2" ry="2" />
<text text-anchor="" x="1045.04" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>core::ptr::drop_in_place (24 samples, 1.06%)</title><rect x="574.7" y="53" width="12.5" height="15.0" fill="rgb(241,93,17)" rx="2" ry="2" />
<text text-anchor="" x="577.73" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Swap::execute (123 samples, 5.43%)</title><rect x="1056.6" y="69" width="64.1" height="15.0" fill="rgb(236,207,28)" rx="2" ry="2" />
<text text-anchor="" x="1059.63" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_IO_file_read (1 samples, 0.04%)</title><rect x="13.6" y="133" width="0.6" height="15.0" fill="rgb(220,71,22)" rx="2" ry="2" />
<text text-anchor="" x="16.65" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>core::ptr::drop_in_place (3 samples, 0.13%)</title><rect x="523.7" y="69" width="1.5" height="15.0" fill="rgb(220,4,22)" rx="2" ry="2" />
<text text-anchor="" x="526.68" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Plus::execute (2 samples, 0.09%)</title><rect x="1150.4" y="85" width="1.0" height="15.0" fill="rgb(222,60,40)" rx="2" ry="2" />
<text text-anchor="" x="1153.41" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>test::stats::Summary::new (1 samples, 0.04%)</title><rect x="15.7" y="117" width="0.6" height="15.0" fill="rgb(221,11,25)" rx="2" ry="2" />
<text text-anchor="" x="18.73" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (43 samples, 1.90%)</title><rect x="919.6" y="53" width="22.4" height="15.0" fill="rgb(214,55,32)" rx="2" ry="2" />
<text text-anchor="" x="922.62" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (119 samples, 5.25%)</title><rect x="525.2" y="69" width="62.0" height="15.0" fill="rgb(253,28,15)" rx="2" ry="2" />
<text text-anchor="" x="528.24" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__xstat64 (1 samples, 0.04%)</title><rect x="14.7" y="117" width="0.5" height="15.0" fill="rgb(217,64,54)" rx="2" ry="2" />
<text text-anchor="" x="17.69" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::StackOperation::dispatch (1,367 samples, 60.35%)</title><rect x="408.5" y="85" width="712.2" height="15.0" fill="rgb(217,106,25)" rx="2" ry="2" />
<text text-anchor="" x="411.54" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm::StackOperation::dispatch</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vdso_clock_gettime (1 samples, 0.04%)</title><rect x="60.0" y="101" width="0.5" height="15.0" fill="rgb(205,52,26)" rx="2" ry="2" />
<text text-anchor="" x="63.01" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Plus::execute (53 samples, 2.34%)</title><rect x="1029.0" y="69" width="27.6" height="15.0" fill="rgb(216,66,1)" rx="2" ry="2" />
<text text-anchor="" x="1032.02" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >s..</text>
</g>
</svg>
