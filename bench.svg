<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="293" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="293" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>term::terminfo::TermInfo::from_name (1 samples, 0.15%)</title><rect x="26.0" y="69" width="1.8" height="15.0" fill="rgb(219,108,1)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Equals::execute (43 samples, 6.48%)</title><rect x="816.8" y="165" width="76.4" height="15.0" fill="rgb(253,113,28)" rx="2" ry="2" />
<text text-anchor="" x="819.81" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_v..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__rust_maybe_catch_panic (1 samples, 0.15%)</title><rect x="26.0" y="197" width="1.8" height="15.0" fill="rgb(246,81,32)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (40 samples, 6.02%)</title><rect x="745.7" y="149" width="71.1" height="15.0" fill="rgb(238,48,0)" rx="2" ry="2" />
<text text-anchor="" x="748.72" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_v..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>term::stdout (1 samples, 0.15%)</title><rect x="26.0" y="117" width="1.8" height="15.0" fill="rgb(230,137,28)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Duplicate::execute (78 samples, 11.75%)</title><rect x="678.2" y="165" width="138.6" height="15.0" fill="rgb(209,218,49)" rx="2" ry="2" />
<text text-anchor="" x="681.19" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm::impl_s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Plus::execute (1 samples, 0.15%)</title><rect x="1174.0" y="181" width="1.8" height="15.0" fill="rgb(223,81,15)" rx="2" ry="2" />
<text text-anchor="" x="1177.01" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>core::fmt::write (1 samples, 0.15%)</title><rect x="26.0" y="37" width="1.8" height="15.0" fill="rgb(239,84,13)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>core::ptr::drop_in_place (3 samples, 0.45%)</title><rect x="672.9" y="133" width="5.3" height="15.0" fill="rgb(254,192,17)" rx="2" ry="2" />
<text text-anchor="" x="675.86" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (10 samples, 1.51%)</title><rect x="948.3" y="149" width="17.8" height="15.0" fill="rgb(224,63,25)" rx="2" ry="2" />
<text text-anchor="" x="951.31" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Swap::execute (39 samples, 5.87%)</title><rect x="1074.5" y="165" width="69.3" height="15.0" fill="rgb(230,212,53)" rx="2" ry="2" />
<text text-anchor="" x="1077.49" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (7 samples, 1.05%)</title><rect x="911.0" y="149" width="12.4" height="15.0" fill="rgb(219,189,0)" rx="2" ry="2" />
<text text-anchor="" x="913.99" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Not::execute (20 samples, 3.01%)</title><rect x="966.1" y="165" width="35.5" height="15.0" fill="rgb(225,143,18)" rx="2" ry="2" />
<text text-anchor="" x="969.08" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >sim..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>fopen (1 samples, 0.15%)</title><rect x="22.4" y="229" width="1.8" height="15.0" fill="rgb(237,45,3)" rx="2" ry="2" />
<text text-anchor="" x="25.44" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>term::terminfo::searcher::get_dbpath_for_term (1 samples, 0.15%)</title><rect x="26.0" y="53" width="1.8" height="15.0" fill="rgb(223,49,23)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Swap::execute (3 samples, 0.45%)</title><rect x="1175.8" y="181" width="5.3" height="15.0" fill="rgb(233,160,23)" rx="2" ry="2" />
<text text-anchor="" x="1178.78" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (16 samples, 2.41%)</title><rect x="973.2" y="149" width="28.4" height="15.0" fill="rgb(247,70,30)" rx="2" ry="2" />
<text text-anchor="" x="976.19" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >si..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vdso_clock_gettime (3 samples, 0.45%)</title><rect x="93.5" y="197" width="5.4" height="15.0" fill="rgb(215,21,25)" rx="2" ry="2" />
<text text-anchor="" x="96.52" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Minus::execute (24 samples, 3.61%)</title><rect x="923.4" y="165" width="42.7" height="15.0" fill="rgb(208,12,19)" rx="2" ry="2" />
<text text-anchor="" x="926.43" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simp..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm_bench (664 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(230,116,33)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm_bench</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Duplicate::execute (5 samples, 0.75%)</title><rect x="1143.8" y="181" width="8.9" height="15.0" fill="rgb(217,159,29)" rx="2" ry="2" />
<text text-anchor="" x="1146.80" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::rt::lang_start_internal (1 samples, 0.15%)</title><rect x="26.0" y="213" width="1.8" height="15.0" fill="rgb(242,93,32)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Equals::execute (2 samples, 0.30%)</title><rect x="1152.7" y="181" width="3.5" height="15.0" fill="rgb(253,46,48)" rx="2" ry="2" />
<text text-anchor="" x="1155.68" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>&lt;term::terminfo::TerminfoTerminal&lt;T&gt;&gt;::new (1 samples, 0.15%)</title><rect x="26.0" y="101" width="1.8" height="15.0" fill="rgb(226,54,17)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (10 samples, 1.51%)</title><rect x="1056.7" y="149" width="17.8" height="15.0" fill="rgb(231,110,54)" rx="2" ry="2" />
<text text-anchor="" x="1059.72" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>je_arena_tcache_fill_small (1 samples, 0.15%)</title><rect x="24.2" y="229" width="1.8" height="15.0" fill="rgb(208,221,15)" rx="2" ry="2" />
<text text-anchor="" x="27.22" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h07e6d8c81f5c1fba (1 samples, 0.15%)</title><rect x="26.0" y="181" width="1.8" height="15.0" fill="rgb(237,19,7)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vdso_clock_gettime (2 samples, 0.30%)</title><rect x="468.5" y="181" width="3.5" height="15.0" fill="rgb(238,222,43)" rx="2" ry="2" />
<text text-anchor="" x="471.49" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>main (1 samples, 0.15%)</title><rect x="26.0" y="229" width="1.8" height="15.0" fill="rgb(243,179,18)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (26 samples, 3.92%)</title><rect x="587.6" y="165" width="46.2" height="15.0" fill="rgb(242,138,39)" rx="2" ry="2" />
<text text-anchor="" x="590.56" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simp..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (14 samples, 2.11%)</title><rect x="653.3" y="149" width="24.9" height="15.0" fill="rgb(250,27,42)" rx="2" ry="2" />
<text text-anchor="" x="656.31" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::StackOperation::dispatch (377 samples, 56.78%)</title><rect x="473.8" y="181" width="670.0" height="15.0" fill="rgb(250,187,1)" rx="2" ry="2" />
<text text-anchor="" x="476.83" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm::StackOperation::dispatch</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Or::execute (27 samples, 4.07%)</title><rect x="1001.6" y="165" width="48.0" height="15.0" fill="rgb(222,86,27)" rx="2" ry="2" />
<text text-anchor="" x="1004.63" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simp..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Minus::execute (3 samples, 0.45%)</title><rect x="1159.8" y="181" width="5.3" height="15.0" fill="rgb(205,126,26)" rx="2" ry="2" />
<text text-anchor="" x="1162.79" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>test::ns_iter_inner (654 samples, 98.49%)</title><rect x="27.8" y="229" width="1162.2" height="15.0" fill="rgb(237,122,8)" rx="2" ry="2" />
<text text-anchor="" x="30.77" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >test::ns_iter_inner</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vdso_clock_gettime (4 samples, 0.60%)</title><rect x="580.5" y="165" width="7.1" height="15.0" fill="rgb(223,1,14)" rx="2" ry="2" />
<text text-anchor="" x="583.45" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vdso_clock_gettime (1 samples, 0.15%)</title><rect x="1054.9" y="149" width="1.8" height="15.0" fill="rgb(223,226,42)" rx="2" ry="2" />
<text text-anchor="" x="1057.94" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vdso_clock_gettime (2 samples, 0.30%)</title><rect x="18.9" y="229" width="3.5" height="15.0" fill="rgb(215,49,8)" rx="2" ry="2" />
<text text-anchor="" x="21.89" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (25 samples, 3.77%)</title><rect x="848.8" y="149" width="44.4" height="15.0" fill="rgb(225,148,31)" rx="2" ry="2" />
<text text-anchor="" x="851.80" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simp..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Or::execute (3 samples, 0.45%)</title><rect x="1168.7" y="181" width="5.3" height="15.0" fill="rgb(250,18,20)" rx="2" ry="2" />
<text text-anchor="" x="1171.67" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::If::execute (17 samples, 2.56%)</title><rect x="893.2" y="165" width="30.2" height="15.0" fill="rgb(227,192,23)" rx="2" ry="2" />
<text text-anchor="" x="896.22" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >si..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (664 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(235,225,27)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::step (609 samples, 91.72%)</title><rect x="98.9" y="197" width="1082.2" height="15.0" fill="rgb(208,176,25)" rx="2" ry="2" />
<text text-anchor="" x="101.86" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm::Machine::step</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>test::test_main (1 samples, 0.15%)</title><rect x="26.0" y="149" width="1.8" height="15.0" fill="rgb(227,179,19)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>core::ptr::drop_in_place (1 samples, 0.15%)</title><rect x="632.0" y="149" width="1.8" height="15.0" fill="rgb(219,126,20)" rx="2" ry="2" />
<text text-anchor="" x="634.99" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Call::execute (25 samples, 3.77%)</title><rect x="633.8" y="165" width="44.4" height="15.0" fill="rgb(214,12,38)" rx="2" ry="2" />
<text text-anchor="" x="636.77" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simp..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>test::test_main_static (1 samples, 0.15%)</title><rect x="26.0" y="165" width="1.8" height="15.0" fill="rgb(239,147,38)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (21 samples, 3.16%)</title><rect x="1106.5" y="149" width="37.3" height="15.0" fill="rgb(217,134,20)" rx="2" ry="2" />
<text text-anchor="" x="1109.48" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >sim..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>term::terminfo::TermInfo::from_env (1 samples, 0.15%)</title><rect x="26.0" y="85" width="1.8" height="15.0" fill="rgb(215,148,2)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Plus::execute (14 samples, 2.11%)</title><rect x="1049.6" y="165" width="24.9" height="15.0" fill="rgb(226,42,32)" rx="2" ry="2" />
<text text-anchor="" x="1052.61" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::run (648 samples, 97.59%)</title><rect x="29.5" y="213" width="1151.6" height="15.0" fill="rgb(227,101,43)" rx="2" ry="2" />
<text text-anchor="" x="32.55" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >simple_vm::Machine::run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__GI___libc_write (1 samples, 0.15%)</title><rect x="17.1" y="229" width="1.8" height="15.0" fill="rgb(233,35,0)" rx="2" ry="2" />
<text text-anchor="" x="20.11" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::Not::execute (2 samples, 0.30%)</title><rect x="1165.1" y="181" width="3.6" height="15.0" fill="rgb(242,34,49)" rx="2" ry="2" />
<text text-anchor="" x="1168.12" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (1 samples, 0.15%)</title><rect x="472.0" y="181" width="1.8" height="15.0" fill="rgb(226,195,22)" rx="2" ry="2" />
<text text-anchor="" x="475.05" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::dispatch (14 samples, 2.11%)</title><rect x="1024.7" y="149" width="24.9" height="15.0" fill="rgb(211,21,33)" rx="2" ry="2" />
<text text-anchor="" x="1027.73" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>test::run_tests_console (1 samples, 0.15%)</title><rect x="26.0" y="133" width="1.8" height="15.0" fill="rgb(219,170,8)" rx="2" ry="2" />
<text text-anchor="" x="28.99" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::impl_stack_operation::If::execute (2 samples, 0.30%)</title><rect x="1156.2" y="181" width="3.6" height="15.0" fill="rgb(206,211,1)" rx="2" ry="2" />
<text text-anchor="" x="1159.23" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>simple_vm::Machine::step (5 samples, 0.75%)</title><rect x="1181.1" y="213" width="8.9" height="15.0" fill="rgb(245,114,48)" rx="2" ry="2" />
<text text-anchor="" x="1184.11" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
</svg>
